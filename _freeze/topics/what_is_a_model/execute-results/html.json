{
  "hash": "5c572c054bd20d35e462e067e3832a50",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"What is a model?\"\nformat: \n  html:\n    fig-height: 3\n---\n\n\n\n\n\n> This is the second part of lecture for Feb 11. Slides are [here](../slides/lec11b_what_is_a_model/lec11b_what_is_a_model.pdf)\n\n<!-- > The reading with this class is [Berk 2020 Ch 1](https://link.springer.com/book/10.1007/978-3-030-40189-4) p. 1--5, stopping at paragraph ending \"...is nonlinear.\" Then p. 14--17 \"Model misspecification...\" through \"...will always be in play.\" -->\n\nWhat is a model, and why would we use one? This page introduces ideas with two models: Ordinary Least Squares and logistic regression. \n<!-- Then, we discuss why we would use a model. -->\n\nAt a high level, a model is a tool to share information across units with different $\\vec{X}$ values when estimating subgroup summaries, such as the conditional mean $\\text{E}(Y\\mid\\vec{X} = \\vec{x})$ within the subgroup taking predictor value $\\vec{X} = \\vec{x}$. By assuming that this conditional mean follows a particular shape defined by a small number of parameters, models can yield better predictions than the sample subgroup means. The advantages of models are particularly apparent when there aren't very many units observed in each subgroup.\n\nLater in the course, we will expand our conception of models to include flexible statistical learning procedures. For now, we will focus on two models from classical statistics.\n\n<!-- ::: columns -->\n\n<!-- ::: {.column width=\"30%\"} -->\n<!-- {{< video https://www.youtube.com/embed/srf9eZ5lq68 >}} -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"30%\"} -->\n<!-- {{< video https://www.youtube.com/embed/3sHWUN-3pZE >}} -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"30%\"} -->\n<!-- {{< video https://www.youtube.com/embed/Pk6uNM74cKE >}} -->\n<!-- ::: -->\n\n<!-- ::: -->\n\n## A simple example\n\nAs an example, we continue to use the data on baseball salaries, with a small twist. The file [`baseball_population.csv`](../data/baseball_population.csv) contains the following variables\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- read_csv(\"https://soc114.github.io/data/baseball_population.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n- `player` is the player name\n- `team` is the team name\n- `salary` is the 2023 salary\n- `team_past_record` is the 2022 proportion of games won by that team\n- `team_past_salary` is the 2022 mean salary in that team\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nOur goal: using a sample, estimate the mean salary of all Dodger players in 2023. Because we have the population, we know the true mean is $6.23m. We will imagine that we don't know this number. Instead of having the full population, we will imagine we have\n\n* information on predictors for all players: position, team, team past record\n* information on salary for a random sample of 5 players per team\n\nOur estimation task will be made difficult by a lack of data: we will work with a sample containing many teams (30), and few players per team (5). We will use statistical learning strategies to pool information from those other teams' players to help us make a better estimate of the Dodger mean salary.\n\nOur predictor will be the `team_past_salary` from the previous year. We assume that a team's past salary in 2022 tells us something about their mean salary in 2023.\n\nFor illustration, draw a sample of 5 players per team\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample <- population |>\n  group_by(team) |>\n  sample_n(5) |>\n  ungroup()\n```\n:::\n\n\n\n\n\nConstruct a tibble with the observations to be predicted: the Dodgers.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_predict <- population |>\n  filter(team == \"L.A. Dodgers\")\n```\n:::\n\n\n\n\n\n## Ordinary Least Squares\n\nWe could model salary next year as a linear function of team past salary by Ordinary Least Squares. In math, OLS produces a prediction\n$$\\hat{Y}_i = \\hat\\alpha + \\hat\\beta X_i$$ \nwith $\\hat\\alpha$ and $\\hat\\beta$ chosen to minimize the sum of squared errors, $\\sum_{i=1}^n \\left(Y_i - \\hat{Y}_i\\right)^2$. Visually, it minimizes all the line segments below.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](what_is_a_model_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\nHere is how to estimate an OLS model using R.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(salary ~ team_past_salary, data = sample)\n```\n:::\n\n\n\n\n\nThen we could predict the mean salary for the Dodgers.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted <- to_predict |>\n  mutate(predicted = predict(model, newdata = to_predict))\n```\n:::\n\n\n\n\n\nWe would report the mean predicted salary for the Dodgers.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted |>\n  summarize(estimated_Dodger_mean = mean(predicted))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 1\n  estimated_Dodger_mean\n                  <dbl>\n1              7224025.\n```\n\n\n:::\n:::\n\n\n\n\n\nOur model-based estimate compares to the true population mean of $6.23m.\n\n## Logistic regression\n\nSometimes the outcome is binary (taking the values `{0,1}` or `{FALSE,TRUE}`). One can model binary outcomes with linear regression, but sometimes the predicted values are negative or greater than 1. As an example, suppose we model the probability that a player is a Designated Hitter (`position == \"DH\"`) as a linear function of player salary. For illustration, we do this on the full population.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_binary_outcome <- lm(\n  position == \"C\" ~ salary,\n  data = population\n)\n```\n:::\n\n\n\n\n\nCatchers tend to have low salaries, so the probability of being a catcher declines as player salary rises. But the linear model carries this trend perhaps further than it ought to: the estimated probability of being a catcher for a player making \\$40 million is -2%! This prediction doesn't make a lot of sense.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](what_is_a_model_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\nLogistic regression is simialr to OLS, except that it uses a nonlinear function (the logistic function) to convert between coefficients that can take any negative or positive values and predictions that always fall in the [0,1] interval.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](what_is_a_model_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\nMathematically, logistic regression replaces $\\text{E}(Y\\mid\\vec{X})$ on the left side of the equation with the logistic function.\n\n$$\n\\underbrace{\\log\\left(\\frac{\\text{P}(Y\\mid\\vec{X})}{1 - \\text{P}(Y\\mid\\vec{X})}\\right)}_\\text{Logistic Function} = \\alpha + \\vec{X}'\\vec\\beta\n$$\n\nIn our example with the catchers, we can use logistic regression to model the probability of being a catcher using the `glm()` function. The `family = \"binomial\"` line tells the function that we want to estimate logistic regression (since \"binomial\" is a distribution for outcomes drawn at random with a given probability).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_regression <- glm(\n  position == \"C\" ~ salary,\n  data = population,\n  family = \"binomial\"\n)\n```\n:::\n\n\n\n\n\nWe can predict exactly as with OLS, except that we need to add the `type = \"response\"` argument to ensure that R transforms the predicted values into the space of predicted probabilities [0,1] instead of the space in which the coefficients are defined ($-\\inf,\\inf$).\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](what_is_a_model_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\nBelow is code to make a prediction for the L.A. Dodgers.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_logistic <- predict(\n  logistic_regression,\n  newdata = to_predict,\n  type = \"response\"\n)\n```\n:::\n\n\n\n\n\nTo summarize, linear regression and logistic regression both use an assumed model to share information across units with different values of $\\vec{X}$ when estimating $\\text{E}(Y\\mid \\vec{X})$ or $\\text{P}(Y = 1\\mid\\vec{X})$. This is especially useful any time when we do not get to observe many units at each value of $\\vec{X}$.\n\n<!-- ## Why model? -->\n\n<!-- Why would we use a model? One case where the need for a model is especiall -->\n\n<!-- ## Penalized regression -->\n\n<!-- Penalized regression is just like OLS, except that it prefers coefficient estimates that are closer to 0. This can reduce sampling variability. One penalized regression is ridge regression, which penalizes the sum of squared coefficients. In our example, it estimates the parameters to minimize -->\n\n<!-- $$\\underbrace{\\sum_{i=1}^n \\left(Y_i - \\hat{Y}_i\\right)^2}_\\text{Squared Error} + \\underbrace{\\lambda\\beta^2}_\\text{Penalty}$$ -->\n\n<!-- where the positive scalar penalty $\\lambda$ encodes our preference for coefficients to be near zero. Otherwise, penalized regression is just like OLS! -->\n\n<!-- The `gam()` function in the `mgcv` package will allow you to fit a ridge regression as follows. -->\n\n<!-- ```{r, message = F, warning = F} -->\n<!-- library(mgcv) -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- model <- gam( -->\n<!--   salary ~ s(record, bs = \"re\"), -->\n<!--   data = sample -->\n<!-- ) -->\n<!-- ``` -->\n\n<!-- Predict the Dodger mean salary just as before, -->\n\n<!-- ```{r} -->\n<!-- to_predict |> -->\n<!--   mutate(predicted = predict(model, newdata = to_predict)) -->\n<!-- ``` -->\n\n<!-- ## Splines -->\n\n<!-- We may want to allow a nonlinear relationship between the predictor and the outcome. One way to do that is with splines, which estimate part of the model locally within regions of the predictor space separated by **knots**. The code below uses a linear spline with knots at 0.4 and 0.6. -->\n\n<!-- ```{r} -->\n<!-- library(splines) -->\n<!-- model <- lm( -->\n<!--   salary ~ bs(record, degree = 1, knots = c(.4,.6)), -->\n<!--   data = sample -->\n<!-- ) -->\n<!-- ``` -->\n\n<!-- ```{r, echo = F, fig.height = 2} -->\n<!-- to_predict_all <- population |> -->\n<!--   distinct(team, record, target_subgroup) -->\n<!-- to_predict_all |> -->\n<!--   mutate(fitted = predict(model, newdata = to_predict_all)) |> -->\n<!--   ggplot(aes(x = record, y = fitted)) + -->\n<!--   geom_line() + -->\n<!--   geom_point(aes(color = target_subgroup), size = 2) + -->\n<!--   scale_color_manual(values = c(\"black\",\"dodgerblue\")) + -->\n<!--   theme_classic() + -->\n<!--   theme(legend.position = \"none\") + -->\n<!--   scale_y_continuous( -->\n<!--     name = \"Team Mean Salary\", -->\n<!--     labels = label_dollar(scale = 1e-6, suffix = \"m\"), -->\n<!--     limits = c(0,10e6) -->\n<!--   ) + -->\n<!--   scale_x_continuous(name = \"Past Team Win-Loss Record\") -->\n<!-- ``` -->\n\n<!-- We can predict the Dodger mean salary just as before! -->\n\n<!-- ```{r} -->\n<!-- to_predict |> -->\n<!--   mutate(predicted = predict(model, newdata = to_predict)) -->\n<!-- ``` -->\n\n<!-- ## Trees -->\n\n<!-- Perhaps our response surface is bumpy, and poorly approximated by a smooth function. Decision trees search the predictor space for discrete places where the outcome changes, and assume that the response is flat within those regions. -->\n\n<!-- ```{r} -->\n<!-- library(rpart) -->\n<!-- model <- rpart(salary ~ record, data = sample) -->\n<!-- ``` -->\n\n<!-- ```{r, echo = F, fig.height = 2} -->\n<!-- to_predict_all |> -->\n<!--   mutate(fitted = predict(model, newdata = to_predict_all)) |> -->\n<!--   ggplot(aes(x = record, y = fitted)) + -->\n<!--   geom_step() + -->\n<!--   geom_point(aes(color = target_subgroup), size = 2) + -->\n<!--   scale_color_manual(values = c(\"black\",\"dodgerblue\")) + -->\n<!--   theme_classic() + -->\n<!--   theme(legend.position = \"none\") + -->\n<!--   scale_y_continuous( -->\n<!--     name = \"Team Mean Salary\", -->\n<!--     labels = label_dollar(scale = 1e-6, suffix = \"m\"), -->\n<!--     limits = c(0,10e6) -->\n<!--   ) + -->\n<!--   scale_x_continuous(name = \"Past Team Win-Loss Record\") -->\n<!-- ``` -->\n\n<!-- Predict as in the other strategies. -->\n<!-- ```{r} -->\n<!-- to_predict |> -->\n<!--   mutate(predicted = predict(model, newdata = to_predict)) -->\n<!-- ``` -->\n\n<!-- ## Conclusion -->\n\n<!-- Statistical learning in this framing is all about -->\n\n<!-- - we have a subgroup with few sampled units (the Dodgers) -->\n<!-- - we want to use other units to help us learn -->\n<!-- - our goal is to predict the population mean in the subgroup -->\n",
    "supporting": [
      "what_is_a_model_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}