---
title: "Data-driven selection of an estimator"
format: 
  html:
    fig-height: 3
---

<!-- > If you are taking notes, here is a PDF of the [slides](slides/lec4/data_driven_selection_slides_handout.pdf) and a PDF of [this page](assets/pdf_chapters/data_driven_selection.pdf). If you are a Stata user, most of this page is R code. The one most important exercise is sample splitting, for which you can use [sample_split.do](assets/stata_code/sample_split.do). -->

Quantitative social scientists have long faced the question of how to choose a model. Even within the scope of linear regression, one might wonder whether a model that interacts two predictors is better than one that includes them only additively. As computational advances have yielded new algorithms for prediction, the number of choices has exploded. Many models are possible. How should we choose?

An algorithm for prediction takes as its input a feature vector $\vec{x}$ and returns as its output a predicted value, $\hat{y}$. One way to choose among several algorithms is to find the one that produces predictions $\hat{y}$ that are as close as possible to the true outcomes $y$. While this predictive metric might seem grounded in data science, this page will show how metrics of predictive performance can also help with a classical social science task: estimating subgroup means. By the end of the page, we will have motivated why one should care about metrics of predictive performance and learned tools to estimate predictive performance by sample splitting.

## Predicting for individuals

Continuing with the example of baseball player salaries, we consider a model to predict salary this year as a linear function of team average salary from last year. We first prepare the environment and load data.

```{r, comment = F, message = F, warning = F}
library(tidyverse)
```
```{r, echo = F, comment = F, message = F, warning = F}
library(scales)
library(ggrepel)
library(lme4)
library(foreach)
library(doParallel)
library(doRNG)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
```

```{r, eval = F}
baseball <- read_csv("https://soc114.github.io/data/baseball_population.csv")
```
```{r, echo = F, comment = F, message = F, warning = F, output = F}
baseball <- read_csv("../data/baseball_population.csv")
```

Then we draw a sample of 5 players per team.
```{r}
set.seed(90095)
learning <- baseball |>
  group_by(team) |>
  slice_sample(n = 5) |>
  ungroup()
```

We estimate a linear regression model on this sample.
```{r}
linear_regression <- lm(
  salary ~ team_past_salary, 
  data = learning
)
```

The figure below visualizes the predictions from this linear regression, calculated for all players who were not part of the random `learning` sample.

```{r, echo = F}
individual_prediction <- baseball |>
  anti_join(learning, by = "player") |>
  nest() |>
  mutate(yhat = map(data, \(x) predict(linear_regression, newdata = x))) |>
  unnest(cols = c(data, yhat)) |>
  # Choose one player per team to highlight
  group_by(team) |>
  arrange(runif(n())) |>
  mutate(highlighted = 1:n() == 1) |>
  ungroup() |>
  arrange(team_past_salary) |>
  # Keep only every 3rd highlight
  mutate(highlighted = highlighted * (cumsum(highlighted) %% 3))

team_estimation <- baseball |>
  anti_join(learning, by = "player") |>
  group_by(team, team_past_salary) |>
  summarize(salary = mean(salary), num = n(), .groups = "drop") |>
  nest() |>
  mutate(yhat = map(data, \(x) predict(linear_regression, newdata = x))) |>
  unnest(cols = c(data, yhat)) |>
  ungroup() |>
  arrange(team_past_salary) |>
  mutate(highlighted = 1:n() %% 3)

mean_salary_learning <- learning |> summarize(estimate = mean(salary)) |> pull(estimate)

rsquared_individual <- individual_prediction |>
  summarize(rsquared = 1 - mean((salary - yhat) ^ 2) / mean((salary - mean_salary_learning) ^ 2)) |>
  pull(rsquared)

rsquared_team <- team_estimation |>
  #left_join(team_subgroup_learning_mean, by = join_by(team)) |>
  summarize(rsquared = 1 - mean((salary - yhat) ^ 2) / mean((salary - mean_salary_learning) ^ 2)) |>
  pull(rsquared)

individual_prediction |>
  ggplot(aes(x = team_past_salary, y = salary)) +
  geom_point(color = "gray", size = .5) +
  geom_line(aes(y = yhat)) +
  # Highighted points
  #geom_point(
  #  data = individual_prediction |> filter(highlighted == 1),
  #  color = "black", size = .5
  #) +
  geom_text_repel(
    data = individual_prediction |> filter(highlighted == 1),
    aes(label = player),
    size = 1.5
  ) +
  geom_segment(
    data = individual_prediction |> filter(highlighted == 1),
    aes(y = .95 * yhat + .05 * salary, 
        yend = .05 * yhat + .95 * salary),
    arrow = arrow(length = unit(.05,"in"), ends = "both")
  ) +
  theme_minimal() +
  scale_y_continuous(
    name = "Individual Player Salary",
    labels = label_currency(scale = 1e-6, suffix = "m")
  ) +
  scale_x_continuous(
    name = "Team Average Salary Last Season",
    labels = label_currency(scale = 1e-6, suffix = "m")
  ) +
  ggtitle(
    "Individual Prediction Errors",
    subtitle = "Randomly selected players highlighted for illustration"
  )
#ggsave("slides/lec4/figures/individual_prediction_errors.pdf", height = 3, width = 5)
```

While one might have hoped to tell a story about high-quality prediction, the dominant story in the individual-level prediction plot is one of poor prediction: players' salaries vary widely around the estimated regression line. To put that fact to a number, one might consider $R^2$ which involves a ratio of two expected squared prediction errors, one from the prediction function $\hat{f}$ and one from a comparison model that predicts the mean for all cases.^[When estimating $R^2$, we often use the training sample mean as an estimator of $\text{E}(Y)$ for the denominator, similar to how the training sample is used to learn $\hat{f}$.]

$$
R^2
= 1 - \frac{
	\overbrace{
		\text{E}\left[
			\left(
				Y - \hat{f}(\vec{X})
			\right)^2
		\right]
	}^{\substack{\text{Expected Squared}\\\text{Prediction Error}}}
}
{
	\underbrace{
		\text{E}\left[\left(Y - \text{E}(Y)\right)^2\right]
	}_\text{Variance of $Y$}
}
$$
In other words, subtracting the predicted values from the individual players' salaries only reduces the expected squared error by `r label_percent(accuracy = .1)(rsquared_individual)`. If the goal is to predict for individuals, the model does not seem very good!

## Estimating subgroup means

A social scientist might respond that the goal was never to accurately predict the salary of any individual baseball player. Rather, the data on individual players was in service of a more aggregate goal: estimating the mean salary on each team. Noting that the prediction is the same for every player on a team, the social scientist might propose the graph below, in which the unit of analysis is a team instead of a player.

```{r, echo = F}
team_estimation |>
  ggplot(aes(x = team_past_salary, y = salary)) +
  geom_point(color = "gray") +
  geom_text_repel(
    data = team_estimation |> filter(highlighted == 1),
    aes(label = team), size = 1.5
  ) +
  geom_segment(
    data = team_estimation |> filter(highlighted == 1),
    aes(
      y = yhat + .1 * (salary - yhat),
      yend = salary - .1 * (salary - yhat)
    ),
    arrow = arrow(length = unit(.05,"in"), ends = "both")
  ) +
  geom_line(aes(y = yhat)) +
  theme_minimal() +
  scale_y_continuous(
    name = "Team Average Salary",
    labels = label_currency(scale = 1e-6, suffix = "m")
  ) +
  scale_x_continuous(
    name = "Team Average Salary Last Season",
    labels = label_currency(scale = 1e-6, suffix = "m")
  ) +
  ggtitle(
    "Group-Level Estimation Errors",
    subtitle = "Dots are true team mean salaries, excluding players\nfrom the learning sample in which the line was estimated"
  )
#ggsave("slides/lec4/figures/team_prediction_errors.pdf", height = 3, width = 5)
```

The social scientist might argue that the model is quite good for team salaries. If we take the goal to be to estimate the team average salary, then we might create an analogous version of $R^2$ focused on estimation of team-average salaries.^[When estimating $R^2_\text{Group}$, we often use the subgroup training sample mean as an estimator of $\text{E}(Y\mid\vec{X})$ for the denominator, similar to how the training sample is used to learn $\hat{f}$.]

$$
R^2_\text{Group}
= 1 - \frac{
	\overbrace{
		\text{E}\left[
			\left(
				\text{E}(Y\mid\vec{X}) - \hat{f}(\vec{X})
			\right)^2
		\right]
	}^{\substack{\text{Expected Squared}\\\text{Estimation Error}}}
}
{
	\underbrace{
		\text{E}\left[\left(\text{E}(Y\mid\vec{X}) - \text{E}(Y)\right)^2\right]
	}_\text{If Predicted $\text{E}(Y)$ for Everyone}
}
$$
By that metric, the model seems quite good, predicting away `r label_percent(accuracy = .1)(rsquared_team)` of the expected squared error at the team level. Surprisingly, a model that was not very good at predicting for individuals might be quite good at predicting the team-average outcomes!

One might respond that prediction and estimation are simply different goals, with little to do with one another. But in fact the two are mathematically linked. Given two models to choose from, the one that predicts better (in squared error loss) will also be a better estimator of the subgroup means.

## Prediction and estimation are connected

To formalize the problem of choosing an estimator, suppose we have two prediction functions $\hat{f}_1$ and $\hat{f}_2$. Each function takes in a vector of features $\vec{x}$ and returns a predicted value, $\hat{f}_1(\vec{x})$ or $\hat{f}_2(\vec{x})$. We will assume for simplicity that each function has already been learned on a simple random sample from our population, and that the remaining units available to us are those that were not used in the learning process.

Suppose we draw a random unit with features $\vec{X}$ and outcome $Y$. For this unit, algorithm one would have a squared prediction error $(Y - \hat{f}_1(\vec{X}))^2$. We might score each algorithm's performance by the average squared prediction error, with the average taken across units.

$$
\underbrace{\text{ESPE}(\hat{f})}_{\substack{\text{Expected Squared}\\\text{Prediction Error}}} = \text{E}\left[\left(Y - \hat{f}(\vec{X})\right)^2\right]
$$
In our baseball example, the algorithm $\hat{f}_1$ makes an error when Mookie Betts has a salary of 
`r baseball |> filter(player == "Betts, Mookie") |> pull(salary) |> label_currency(prefix = "", scale = 1e-6, suffix = "m", accuracy = .1)()` but the algorithm only predicts `r baseball |> mutate(yhat = predict(linear_regression, newdata = baseball)) |> filter(player == "Betts, Mookie") |> pull(yhat) |> unname() |> label_currency(prefix = "", scale = 1e-6, suffix = "m", accuracy = .1)()`. The expected squared prediction error is the squared difference between these two values, taken on average over all players.

Our social scientist has already replied that we rarely care about predicting the salary of an individual player. Instead, our questions are really about estimating subgroup means, such as the mean pay on each team. The social scientist might instead want to know about estimation error,
$$
\underbrace{\text{ESEE}(\hat{f})}_{\substack{\text{Expected Squared}\\\text{Estimation Error}}} = \text{E}\left[\left(\text{E}(Y\mid\vec{X}) - \hat{f}(\vec{X})\right)^2\right]
$$
where $\hat{f}(\vec{X})$ is the predicted salary of a player on team $\vec{X}$ and $\text{E}(Y\mid\vec{X})$ is the true population average salary on that team. This social scientist does not care about predicting for individual salaries $Y$, but rather about accurately estimating the mean salary $\text{E}(Y\mid\vec{X})$ in each team.

A little math (proof at the end of this section) can show that these two goals are actually closely linked. Expected squared prediction error equals expected squared estimation error plus expected within-group variance.

$$
\underbrace{\text{ESPE}(\hat{f})}_{\substack{\text{Expected Squared}\\\text{Prediction Error}}}  = \underbrace{\text{ESEE}(\hat{f})}_{\substack{\text{Expected Squared}\\\text{Estimation Error}}} + \underbrace{\text{E}\left[\text{V}(Y\mid\vec{X})\right]}_{\substack{\text{Expected Within-}\\\text{Group Variance}}} 
$$
Taking our baseball example, there are two sources of prediction error for Mookie Betts.

First, salaries vary among the Dodger players ($\text{V}(Y\mid\vec{X} = \text{Dodgers})$). Because Mookie Betts and Freddie Freeman are both players on the Dodgers, they are identical from the perspective of the model (they have identical $\vec{X}$ values) and it has to make the same prediction for both of them. Just as there is variance within the Dodgers, there is variance within all MLB teams. The within-team variance averaged over teams (weighted by size) is the term at the right of the decomposition.

Second, the expected squared estimation error is the average squared difference between each player's predicted salary and the true mean pay on that player's team, $\text{E}(Y\mid\vec{X})$. In the case of Mookie Betts, this is the difference between the prediction for Mookie Betts and the true mean salary on his team, the Dodgers. Estimation error corresponds to our error if our goal is to estimate the mean salary on each team, instead of predicting the salary for each individual.

Now suppose two prediction algorithms $\hat{f}_1$ and $\hat{f}_2$ have different performance. For example, maybe the first algorithm is a better predictor: $\text{ESPE}(\hat{f}_1) < \text{ESPE}(\hat{f}_2)$. Regardless of which algorithm is used, the within-group variance component of the decomposition is unchanged. Therefore, if algorithm 1 is the better predictor, then it must also be the better estimator: $\text{ESEE}(\hat{f}_1) < \text{ESEE}(\hat{f}_2)$.

In fact, suppose an algorithm was omniscient and managed to predict the true conditional mean function for every observation, $\hat{f}_\text{Omniscient}(\vec{X}) = \text{E}(Y\mid\vec{X})$. Then estimation error would be zero for this function. Prediction error would equal the expected within-group variance. The best possible prediction function (with squared error loss) is the conditional mean. This is one intuitive reason why an algorithm with good predictive performance is also a good estimator.

These facts motivate an idea for choosing an estimation function: to estimate conditional means well, choose the algorithm that minimizes squared prediction error.

**Appendix to section.** A proof of the decomposition is provided below, but the ideas above are more important than the details of the proof.

$$
\begin{aligned}
\text{ESPE}(\hat{f}) 
&= \text{E}\left[\left(Y - \hat{f}(\vec{X})\right)^2\right] \\
&\text{Add zero} \\
&= \text{E}\left[\left(Y - \text{E}(Y\mid\vec{X}) + \text{E}(Y\mid\vec{X}) - \hat{f}(\vec{X})\right)^2\right] \\
&= \underbrace{
  \text{E}\left[\left(Y - \text{E}(Y\mid\vec{X})\right) ^ 2\right]
}_{=\text{E}[\text{V}(Y\mid\vec{X})]}
  + \underbrace{
  \text{E}\left[\left(\text{E}(Y\mid\vec{X}) - \hat{f}(\vec{X})\right) ^ 2\right]
  }_{=\text{ESEE}(\hat{f})}
  \\
  &\qquad + \underbrace{
  2\text{E}\left[\left(Y - \text{E}(Y\mid\vec{X})\right)\left(\text{E}(Y\mid\vec{X}) - \hat{f}(\vec{X})\right)\right]
  }_{\substack{=\text{Cov}[Y - \text{E}(Y\mid\vec{X}), E(Y\mid\vec{X} - \hat{f}(\vec{X}))]=0\\\text{covariance of within-group error and estimation error,}\\\text{equals zero if the test case }Y\text{ is not used to learn }\hat{f}}} \\
  &= \text{ESEE}(\hat{f}) + \text{E}\left[\text{V}(Y\mid\vec{X})\right]
\end{aligned}
$$

## Why out-of-sample prediction matters

The connection between prediction and estimation opens a powerful bridge: we can find good estimators by exploring which algorithms predict well. But it is important to remember that this bridge exists only for **out-of-sample prediction error**: error when predictions are made on a new sample that did not include the initial predictions.

### k-nearest neighbors estimator

To illustrate in-sample and out-of-sample prediction error, we consider a **nearest neighbors estimator**. When making a prediction for player $i$, we might worry that we have too few sampled units on the team of player $i$. We might solve this issue by averaging the sampled salaries within the team of player $i$ and also the $k$ nearest teams whose salaries in the past season were most similar.
```{r, echo = F}
dodgers_past_salary <- baseball |> 
  distinct(team, team_past_salary) |> 
  filter(team == "L.A. Dodgers") |> 
  pull(team_past_salary)
neighbors <- baseball |>
  distinct(team, team_past_salary) |>
  mutate(difference_from_dodgers = (team_past_salary - dodgers_past_salary) ^ 2) |>
  arrange(difference_from_dodgers) |>
  mutate(salary_label = label_currency(scale = 1e-6, suffix = "m")(team_past_salary))
```
For example, the Dodgers' past-year average salary was `r label_currency(scale = 1e-6,suffix = "m")(dodgers_past_salary)`. The most similar team to them was the `r neighbors$team[2]`, who had an average salary of `r neighbors$salary_label[2]`. Because the past salaries are so similar, we might pool information: predict the Dodgers' mean salary by the average of sampled players on both the Dodgers and the `r neighbors$team[2]`. If we wanted to pool more information, we might include the next-most similar team, the `r neighbors$team[3]` with past salary `r neighbors$salary_label[3]`. We could pool more by also including the 3rd-nearest neighbor (`r neighbors$team[4]`, `r neighbors$salary_label[4]`), the 4th-nearest neighbor (`r neighbors$team[5]`, `r neighbors$salary_label[5]`), and so on. The more neighbors we include, the more pooled our estimate becomes.

### In-sample performance

How many neighbors should we include? We first consider evaluating by **in-sample performance**: learn the estimator on a sample and evaluate predictive performance in that same sample. We repeatedly:

* draw a sample of 10 players per team
* apply the $k$-nearest neighbor estimator
* evaluate mean squared prediction error in that same sample

The blue line in the figure below shows results. In-sample mean squared prediction error is lowest when we pool over 0 neighbors. With in-sample evaluation, the predictions become gradually worse (higher mean squared error) as we pool information over more teams. If our goal were in-sample prediction, we should choose an estimator that does not pool information at all: the Dodgers' population mean salary would be estimated by the mean among the sampled Dodgers only.

```{r, echo = F, warning = F, comment = F, message = F}
knn_estimator <- function(n_neighbors) {
  learning <- baseball |>
    group_by(team) |>
    slice_sample(n = 10) |>
    ungroup()
  
  testing <- baseball |>
    anti_join(learning, by = join_by(player))
    
  aggregated <- learning |>
    group_by(team, team_past_salary) |>
    summarize(
      estimate = mean(salary),
      .groups = "drop"
    )
  
  estimate <- foreach(i = 1:nrow(aggregated), .combine = "rbind") %do% {
    aggregated |>
      mutate(distance = (team_past_salary - aggregated$team_past_salary[i]) ^ 2) |>
      arrange(distance) |>
      slice_head(n = n_neighbors + 1) |>
      summarize(estimate = mean(estimate),
                team_past_salary = team_past_salary[1],
                team = team[1])
  }
  
  test_mse <- testing |>
    select(team, salary) |>
    left_join(estimate, by = "team") |>
    summarize(mse = mean((salary - estimate) ^ 2)) |>
    pull(mse)
  
  train_mse <- learning |>
    select(team, salary) |>
    left_join(estimate, by = "team") |>
    summarize(mse = mean((salary - estimate) ^ 2)) |>
    pull(mse)
  
  estimate |>
    nest() |>
    mutate(n_neighbors = n_neighbors, test_mse = test_mse, train_mse = train_mse)
}

set.seed(90095)
estimates <- foreach(i = 0:29, .combine = "rbind") %do% {
  foreach(rep = 1:50, .combine = "rbind", .packages = "tidyverse") %dorng% {
    knn_estimator(n_neighbors = i)
  }
}

unsmoothed <- estimates |>
  select(n_neighbors, test_mse, train_mse) |>
  group_by(n_neighbors) |>
  summarize_all(mean) |>
  pivot_longer(cols = -n_neighbors) |>
  mutate(name = case_when(
    name == "test_mse" ~ "Out of sample cases",
    name == "train_mse" ~ "Same cases used for learning"
  ))

smoothed <- unsmoothed |>
  group_by(name) |>
  nest() |>
  mutate(data = map(data, \(x) {
    fit <- loess(value ~ n_neighbors, data = x)
    x |>
      mutate(smoothed = predict(fit))
  })) |>
  unnest(data)

smoothed |>
  ggplot(aes(x = n_neighbors, y = smoothed, color = name)) +
  geom_point() +
  geom_line() +
  theme_minimal() +
  scale_x_continuous(name = "Neighboring Teams Included in Mean\n<- more flexible model           more pooled model ->") +
  scale_y_continuous(breaks = NULL, name = "Mean Squared Prediction Error") +
  scale_color_discrete(name = "Evaluation set") +
  ggtitle(
    "In-sample and out-of-sample measures of predictive performance",
    subtitle = "Nearest neighbor estimator applied to repeated samples of 10 players per team.\nCurves are smoothed estimates over simulation results."
  )

for (i in c(0:5,10,15,20,25,29)) {
  smoothed |>
    ggplot(aes(x = n_neighbors, y = smoothed, color = name)) +
    geom_point(alpha = 0) +
    geom_point(data = smoothed |> filter(n_neighbors <= i)) +
    geom_line(data = smoothed |> filter(n_neighbors <= i)) +
    theme_minimal() +
    scale_x_continuous(name = "Neighboring Teams Included in Mean\n<- more flexible model           more pooled model ->") +
    scale_y_continuous(breaks = NULL, name = "Mean Squared Prediction Error") +
    scale_color_discrete(name = "Evaluation set") +
    ggtitle(
      "In-sample and out-of-sample measures of predictive performance",
      subtitle = "Nearest neighbor estimator applied to repeated samples of 10 players per team.\nCurves are smoothed estimates over simulation results."
    )
  #ggsave(paste0("slides/lec4/figures/knn_",i,".pdf"), height = 4, width = 6)
}
```

### Out-of-sample performance

The red line in the figure above shows a different performance metric: **out-of-sample performance**. This line shows what happens when we repeatedly:

* draw a sample of 10 players per team
* apply the $k$-nearest neighbor estimator
* evaluate mean squared prediction error on all units **not** included in that sample

The red line of out-of-sample performance looks very different than the blue line of in-sample performance, in two ways.

First, the red line is always higher than the blue line. It is always harder to predict out-of-sample cases than to predict in-sample cases. This is unsurprising---the blue line was cheating by getting to see the outcomes of the very cases it was trying to predict!

Second, the red line exhibits a U-shaped relationship. Predictive performance improves (lower mean squared error) as we pool information over a few nearby teams. This is because the variance of the estimator is declining. After reaching an optimal value at around 10 neighbors, predictive performance begins to become worse (higher mean squared error).

One way to think about the red and blue lines is in terms of the signal and the noise. In any particular sample of 10 Dodger players, there is some amount of signal (true information about the Dodger population mean) and some amount of noise (randomness in the sample average arising from which 10 players we happened to sample). The distinction is irrelevant for in-sample prediction error, for which a close fit to both the signal and the noise yields low prediction error. But for out-of-sample prediction error, fitting to the signal improves performance while fitting to the noise harms performance. As one moves to the right in the graph, one is getting less of the signal and less of the noise. Thus, the blue line of in-sample performance gets consistently worse. The red line improves at first as the reduction in noise outweighs the reduction in signal, but then gets worse as the reduction in signal begins to outweigh the reduction in noise. In-sample prediction error is a poor metric because fitting closely to the noise can make this metric look misleadingly good. Out-of-sample error avoids this problem. The best value for nearest neighbors is the one that optimizes the tradeoff between signal and noise, where the red curve is minimized.

Another way to think about the lines is in terms of a bias-variance tradeoff. As we pool the Dodgers together with the N.Y. Mets and other teams, the variance of the estimator declines because the Dodger predicted salary is averaged over more teams. But the bias of the estimator increases: the N.Y. Mets are not the Dodgers, and including them in the average induces a bias. The minimum of the red curve is the amount of information pooling that optimizes the bias-variance tradeoff.

## Sample splitting

The illustration above showed that we ideally evaluate an estimator learned in a sample by performance when making predictions for the rest of the population (excluding that sample). But in practice, we often have access only to the sample and not to the rest of the population. To learn out-of-sample predictive performance, we need sample splitting.

In its simplest version, sample splitting proceeds in three steps:

1) Randomly partition sampled cases into `training` and `test` sets
2) Learn the prediction function among `training` cases
3) Evaluate its performance among `test` cases

Visually, we begin by randomly assigning cases into training or test sets.

```{r, echo = F}
ucla <- "#2774AE"
tibble(index = 1:16) |>
  mutate(set = sample(rep(c("Train Set","Test Set"),8))) |>
  mutate(set = fct_rev(set)) |>
  ggplot() +
  geom_rect(aes(xmin = 0, xmax = 1.5, ymin = index, ymax = index + 1, fill = set)) +
  geom_rect(aes(xmin = 2.5, xmax = 3, ymin = index, ymax = index + 1, fill = set)) +
  annotate(geom = "segment", color = "gray", x = c(.3,.6,.9,1.2), y = 1, yend = 17) +
  annotate(geom = "segment", x = 0, xend = 1.5, y = 1:17, color = "gray") +
  annotate(geom = "segment", x = 2.5, xend = 3, y = 1:17, color = "gray") +
  scale_fill_manual(values = c(ucla,"black"), name = "Randomly\nAssigned To") +
  annotate(geom = "text", x = -.1, y = 9, label = "Sampled\nCases",
           hjust = 1, fontface = "bold") +
  annotate(geom = "text", x = .75, y = 18, label = "Predictors", fontface = "bold") +
  annotate(geom = "text", x = 2.75, y = 18, label = "Outcome", fontface = "bold") +
  xlim(c(-.5,3)) +
  theme_void()
#ggsave("slides/lec4/figures/randomize_split.pdf", height = 3, width = 6)
```

Then we separate these into two datasets. We use the train set to learn the model and the test set to evaluate the performance of the learned model.

```{r, echo = F}
ucla <- "#2774AE"
ggplot() +
  annotate(geom = "rect", xmin = 0, xmax = 1.5, ymin = 5, ymax = 9, fill = ucla, alpha = .8) +
  annotate(geom = "rect", xmin = 2.5, xmax = 3, ymin = 5, ymax = 9, fill = ucla, alpha = .8) +
  annotate(geom = "rect", xmin = 0, xmax = 1.5, ymin = 0, ymax = 4, fill = "black") +
  annotate(geom = "rect", xmin = 2.5, xmax = 3, ymin = 0, ymax = 4, fill = "black") +
  annotate(geom = "text", x = -.1, y = 7, label = "Training Cases:\nUsed to learn\nthe model",
           hjust = 1, color = ucla, fontface = "bold") +
  annotate(geom = "text", x = -.1, y = 2, label = "Test Cases:\nUsed to evaluate\nthe model",
           hjust = 1, fontface = "bold") +
  annotate(geom = "text", x = .75, y = 9.5, label = "Predictors", fontface = "bold") +
  annotate(geom = "text", x = 2.75, y = 9.5, label = "Outcome", fontface = "bold") +
  annotate(geom = "segment", x = 1.6, xend = 2.4, y = c(2,7), yend = c(2,7), arrow = arrow(length = unit(.05,"in"))) +
  annotate(geom = "text", x = 2, y = c(7.2,2.2), label = c("Learn\nPredictions","Evaluate\nPredictions"), vjust = 0, size = 3) +
  annotate(geom = "segment", color = "gray", x = c(.3,.6,.9,1.2), y = 5, yend = 9) +
  annotate(geom = "segment", color = "gray", x = c(.3,.6,.9,1.2), y = 0, yend = 4) +
  annotate(geom = "segment", color = "gray", x = 0, xend = 1.5, y = seq(5.5,8.5,.5)) +
  annotate(geom = "segment", color = "gray", x = 0, xend = 1.5, y = seq(.5,3.5,.5)) +
  annotate(geom = "segment", color = "gray", x = 2.5, xend = 3, y = seq(5.5,8.5,.5)) +
  annotate(geom = "segment", color = "gray", x = 2.5, xend = 3, y = seq(.5,3.5,.5)) +
  xlim(c(-1,3)) +
  theme_void()
#ggsave("slides/lec4/figures/train_test.pdf", height = 3, width = 6)
```

In code, we can carry out a train-test split by first loading the baseball population,

```{r, eval = F, message = F, warning = F, comment = F, output = F}
baseball_population <- read_csv("https://soc114.github.io/data/baseball_population.csv")
```
```{r, echo = F, message = F, warning = F, comment = F, output = F}
baseball_population <- read_csv("../data/baseball_population.csv")
```
and drawing a sample of 10 players per team.
```{r}
baseball_sample <- baseball_population |>
  group_by(team) |>
  slice_sample(n = 10) |>
  ungroup()
```

We can then create the split. The code below first stratifies by team and then randomly samples 50\% of cases to be used for the `train` set.

```{r}
train <- baseball_sample |>
  group_by(team) |>
  slice_sample(prop = .5)
```

The code below takes all remaining cases not used for training to be used as the `test` set.

```{r}
test <- baseball_sample |>
  anti_join(train, by = join_by(player))
```

We can then learn a prediction function in the train set and evaluate performance in the test set. For example, the code below uses OLS.

```{r}
ols <- lm(salary ~ team, data = train)
test_mse <- test |>
  # Make predictions
  mutate(yhat = predict(ols, newdata = test)) |>
  # Calculate squared errors
  mutate(squared_error = (salary - yhat) ^ 2) |>
  # Summarize
  summarize(mse = mean(squared_error))
```

## Tuning parameters by sample splitting

One way we might use sample splitting is for parameter tuning: to choose the value of some unknown tuning parameter such as the penalty $\lambda$ in ridge regression.

```{r}
library(glmnet)
ridge_regression <- glmnet(
  x = model.matrix(~team, data = train),
  y = train |> pull(salary),
  alpha = 0
)
```
The `glmnet` package makes estimates at many values of the penalty parameter $\lambda$. We can make predictions in the test set from models using these various values of $\lambda$.
```{r}
predicted <- predict(
  ridge_regression,
  newx = model.matrix(~team, data = test)
)
```

We can extract the penalty parameter values with `ridge_regression$lambda`, organizing them in a `tibble` for ease of access.
```{r}
lambda_tibble <- tibble(
  lambda = ridge_regression$lambda,
  lambda_index = colnames(predicted)
)
```
For each $\lambda$ value, the predictions are a column of `predicted`. The code below wrangles these predictions into a tidy format.
```{r}
predicted_tibble <- as_tibble(predicted) |>
  # Append the actual value of the test outcome
  mutate(y = test |> pull(salary)) |>
  pivot_longer(cols = -y, names_to = "lambda_index", values_to = "yhat") |>
  left_join(lambda_tibble, by = join_by(lambda_index)) |>
  mutate(squared_error = (y - yhat) ^ 2)
```
At each $\lambda$ value, we can calculate mean squared error in the test set.
```{r}
mse <- predicted_tibble |>
  group_by(lambda) |>
  summarize(mse = mean(squared_error))
```

The figure below visualizes these estimates. As the penalty parameter grows larger, predictive performance improves (lower error) to a point and then begins to get worse. The selected best value of the tuning parameter $\lambda$ is highlighted in blue.
```{r, echo = F}
mse |>
  mutate(best = mse == min(mse)) |>
  arrange(best) |>
  ggplot(aes(x = lambda, y = mse, color = best)) +
  geom_line() +
  geom_point() +
  scale_x_continuous(trans = transform_log()) +
  scale_y_continuous(trans = transform_log()) +
  scale_color_manual(
    values = c("gray",ucla), name = element_blank(),
    labels = c("Not Best Lambda","Best Lambda")
  ) +
  theme_minimal() +
  labs(
    x = "Penalty Parameter Lambda\n(Log Scale)",
    y = "Test Mean Squared Error\n(Log Scale)"
  )
#ggsave("slides/lec4/figures/choosing_lambda.pdf", height = 3, width = 5)

```

## Cross-validation

A downside of 50-50 sample splitting is that the train set is only half as large as the full available sample. We might prefer if it were larger, for instance 80\% of the data used for training and only 20\% used for testing. But then our estimates of performance in the test set might be noisy.

One solution to this problem is **cross-validation**, which proceeds in a series of steps:

1) Randomize the sampled cases into a set of folds (e.g., 5 folds).
2) Take fold 1 as the test set and estimate predictive performance.
3) Take fold 2 as the test set and estimate predictive performance.
4) Iterate until all folds have served as the test set
5) Average predictive performance over the folds

```{r, echo = F}
forplot <- tibble(y = 1:5, labels = c("Train","Train","Train","Train","Train")) |>
  mutate(fold = paste("Fold",6-y))
p0 <- forplot |>
  ggplot() +
  geom_rect(
    aes(ymin = y, ymax = y + 1, xmin = 0, xmax = 1),
    fill = ucla, color = "gray"
  ) +
  geom_text(
    aes(label = fold, y = y + .5),
    x = .5, fontface = "bold",
    color = "white"
  ) +
  theme_void()
#ggsave("slides/lec4/figures/five_folds.pdf", plot = p0, height = 3, width = .8)
for (i in 1:5) {
  forplot_case <- forplot
  forplot_case$labels[i] <- "Test"
  p <- forplot_case |>
    ggplot() +
    geom_rect(
      aes(ymin = y, ymax = y + 1, xmin = 0, xmax = 1, fill = labels),
      color = "gray"
    ) +
    scale_fill_manual(
      values = c("black",ucla)
    ) +
    geom_text(
      aes(label = labels, y = y + .5),
      x = .5, fontface = "bold",
      color = "white"
    ) +
    theme_void() +
    theme(legend.position = "none")
  assign(paste0("p",i),p)
  #ggsave(paste0("slides/lec4/figures/five_folds_",i,".pdf"), plot = p, height = 3, width = .8)
}
blank_space <- ggplot() + theme_void()
gridExtra::grid.arrange(
  p0,blank_space,blank_space,p1,p2,p3,p4,p5, nrow = 1
)
```

Optionally, repeat for many repetitions of randomly assigning cases to folds to reduce stochastic error.

Cross-validation is so common that it is already packaged into some of the learning algorithms we have considered in class. For example, the code below carries out cross-validation to automatically select the penalty parameter for ridge regression.

```{r}
ridge_regression_cv <- cv.glmnet(
  x = model.matrix(~team, data = train),
  y = train |> pull(salary),
  alpha = 0
)
```

We can use `ridge_regression_cv$lambda.min` to extract the chosen value of $\lambda$ that minimizes cross-validated mean squared error (`r ridge_regression_cv$lambda.min`). We can also visualize the performance with a `plot()` function.

```{r}
plot(ridge_regression_cv)
```

We can make predictions at the chosen value of $\lambda$ by specifying the `s` argument in the `predict()` function.

```{r}
predicted <- test |>
  mutate(
    yhat = predict(
      ridge_regression_cv,
      s = "lambda.min",
      newx = model.matrix(~team, data = test)
    )[,1]
  )
```

## Choosing an algorithm by sample splitting

In the example above, we used sample splitting to choose the optimal value of a penalty parameter ($\lambda$) within a particular algorithm for prediction (ridge regression). One can also use a train-test split to choose among many very different estimators. For example, we might estimate OLS, a tree, and a forest.

```{r}
library(rpart)
library(grf)
```

```{r, warning = F}
ols <- lm(salary ~ team_past_salary, data = train)
tree <- rpart(salary ~ team_past_salary, data = train)
forest <- regression_forest(
  X = model.matrix(~team_past_salary, data = train),
  Y = train |> pull(salary)
)
```

We can make predictions for all of these estimators in the test set.

```{r}
predicted <- test |>
  mutate(
    yhat_ols = predict(ols, newdata = test),
    yhat_tree = predict(tree, newdata = test),
    yhat_forest = predict(forest, newdata = model.matrix(~team_past_salary, data = test))$predictions
  ) |>
  pivot_longer(
    cols = starts_with("yhat"), names_to = "estimator", values_to = "yhat"
  )
```

The figure below visualizes the predicted values.
```{r, echo = F}
predicted |>
  ggplot(aes(x = team_past_salary, y = yhat)) +
  geom_point() +
  geom_line() +
  facet_wrap(~estimator, labeller = as_labeller(\(x) {
    case_when(
      x == "yhat_forest" ~ "Forest",
      x == "yhat_tree" ~ "Tree",
      x == "yhat_ols" ~ "OLS"
    )
  })) +
  scale_x_continuous(name = "Team Average Salary Last Season",
                     labels = label_currency(scale = 1e-6, suffix = "m")) +
  scale_y_continuous(name = "Team Average Salary This Season",
                     labels = label_currency(scale = 1e-6, suffix = "m")) +
  theme_minimal()
#ggsave("slides/lec4/figures/many_algorithm_predictions.pdf", height = 3, width = 5)
```

We can calculate mean squared error in the test set for each algorithm to determine which one is producing the best predictions.

```{r}
mse <- predicted |>
  group_by(estimator) |>
  mutate(squared_error = (salary - yhat) ^ 2) |>
  summarize(mse = mean(squared_error))
```

```{r, echo = F}
mse |>
  mutate(best = mse == min(mse)) |>
  ggplot(aes(x = estimator, y = mse, color = best)) +
  geom_point(size = 3) +
  scale_x_discrete(
    name = "Estimator",
    labels = \(x) {
      case_when(
        x == "yhat_forest" ~ "Forest",
        x == "yhat_tree" ~ "Tree",
        x == "yhat_ols" ~ "OLS"
      )
    }
  ) +
  scale_y_continuous(name = "Mean Squared Error\n(Test Set)") +
  scale_color_manual(
    values = c("black",ucla), name = element_blank(),
    labels = c("Not Best Algorithm","Best Algorithm")
  ) +
  theme_minimal()
#ggsave("slides/lec4/figures/many_algorithm_MSE.pdf", height = 3, width = 5)
```

<!-- ## SuperLearner -->

<!-- What if we didn't just choose the best? -->

